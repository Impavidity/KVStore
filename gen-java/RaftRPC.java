/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-11-29")
public class RaftRPC {

  public interface Iface {

    public AppendEntriesResponse AppendEntries(int term, int leaderID, int prevLogIndex, int prevLogTerm, List<Entry> entries, int leaderCommit) throws org.apache.thrift.TException;

    public RequestVoteResponse RequestVote(int term, int candidateID, int lastLogIndex, int lastLogTerm) throws org.apache.thrift.TException;

    public ClientResponse Get(int id, String key) throws org.apache.thrift.TException;

    public ClientResponse Put(int id, String key, String value) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void AppendEntries(int term, int leaderID, int prevLogIndex, int prevLogTerm, List<Entry> entries, int leaderCommit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void RequestVote(int term, int candidateID, int lastLogIndex, int lastLogTerm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Get(int id, String key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Put(int id, String key, String value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public AppendEntriesResponse AppendEntries(int term, int leaderID, int prevLogIndex, int prevLogTerm, List<Entry> entries, int leaderCommit) throws org.apache.thrift.TException
    {
      send_AppendEntries(term, leaderID, prevLogIndex, prevLogTerm, entries, leaderCommit);
      return recv_AppendEntries();
    }

    public void send_AppendEntries(int term, int leaderID, int prevLogIndex, int prevLogTerm, List<Entry> entries, int leaderCommit) throws org.apache.thrift.TException
    {
      AppendEntries_args args = new AppendEntries_args();
      args.setTerm(term);
      args.setLeaderID(leaderID);
      args.setPrevLogIndex(prevLogIndex);
      args.setPrevLogTerm(prevLogTerm);
      args.setEntries(entries);
      args.setLeaderCommit(leaderCommit);
      sendBase("AppendEntries", args);
    }

    public AppendEntriesResponse recv_AppendEntries() throws org.apache.thrift.TException
    {
      AppendEntries_result result = new AppendEntries_result();
      receiveBase(result, "AppendEntries");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AppendEntries failed: unknown result");
    }

    public RequestVoteResponse RequestVote(int term, int candidateID, int lastLogIndex, int lastLogTerm) throws org.apache.thrift.TException
    {
      send_RequestVote(term, candidateID, lastLogIndex, lastLogTerm);
      return recv_RequestVote();
    }

    public void send_RequestVote(int term, int candidateID, int lastLogIndex, int lastLogTerm) throws org.apache.thrift.TException
    {
      RequestVote_args args = new RequestVote_args();
      args.setTerm(term);
      args.setCandidateID(candidateID);
      args.setLastLogIndex(lastLogIndex);
      args.setLastLogTerm(lastLogTerm);
      sendBase("RequestVote", args);
    }

    public RequestVoteResponse recv_RequestVote() throws org.apache.thrift.TException
    {
      RequestVote_result result = new RequestVote_result();
      receiveBase(result, "RequestVote");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RequestVote failed: unknown result");
    }

    public ClientResponse Get(int id, String key) throws org.apache.thrift.TException
    {
      send_Get(id, key);
      return recv_Get();
    }

    public void send_Get(int id, String key) throws org.apache.thrift.TException
    {
      Get_args args = new Get_args();
      args.setId(id);
      args.setKey(key);
      sendBase("Get", args);
    }

    public ClientResponse recv_Get() throws org.apache.thrift.TException
    {
      Get_result result = new Get_result();
      receiveBase(result, "Get");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Get failed: unknown result");
    }

    public ClientResponse Put(int id, String key, String value) throws org.apache.thrift.TException
    {
      send_Put(id, key, value);
      return recv_Put();
    }

    public void send_Put(int id, String key, String value) throws org.apache.thrift.TException
    {
      Put_args args = new Put_args();
      args.setId(id);
      args.setKey(key);
      args.setValue(value);
      sendBase("Put", args);
    }

    public ClientResponse recv_Put() throws org.apache.thrift.TException
    {
      Put_result result = new Put_result();
      receiveBase(result, "Put");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Put failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void AppendEntries(int term, int leaderID, int prevLogIndex, int prevLogTerm, List<Entry> entries, int leaderCommit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AppendEntries_call method_call = new AppendEntries_call(term, leaderID, prevLogIndex, prevLogTerm, entries, leaderCommit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AppendEntries_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int term;
      private int leaderID;
      private int prevLogIndex;
      private int prevLogTerm;
      private List<Entry> entries;
      private int leaderCommit;
      public AppendEntries_call(int term, int leaderID, int prevLogIndex, int prevLogTerm, List<Entry> entries, int leaderCommit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.term = term;
        this.leaderID = leaderID;
        this.prevLogIndex = prevLogIndex;
        this.prevLogTerm = prevLogTerm;
        this.entries = entries;
        this.leaderCommit = leaderCommit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AppendEntries", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AppendEntries_args args = new AppendEntries_args();
        args.setTerm(term);
        args.setLeaderID(leaderID);
        args.setPrevLogIndex(prevLogIndex);
        args.setPrevLogTerm(prevLogTerm);
        args.setEntries(entries);
        args.setLeaderCommit(leaderCommit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AppendEntriesResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AppendEntries();
      }
    }

    public void RequestVote(int term, int candidateID, int lastLogIndex, int lastLogTerm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestVote_call method_call = new RequestVote_call(term, candidateID, lastLogIndex, lastLogTerm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestVote_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int term;
      private int candidateID;
      private int lastLogIndex;
      private int lastLogTerm;
      public RequestVote_call(int term, int candidateID, int lastLogIndex, int lastLogTerm, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.term = term;
        this.candidateID = candidateID;
        this.lastLogIndex = lastLogIndex;
        this.lastLogTerm = lastLogTerm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestVote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RequestVote_args args = new RequestVote_args();
        args.setTerm(term);
        args.setCandidateID(candidateID);
        args.setLastLogIndex(lastLogIndex);
        args.setLastLogTerm(lastLogTerm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RequestVoteResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RequestVote();
      }
    }

    public void Get(int id, String key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Get_call method_call = new Get_call(id, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Get_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private String key;
      public Get_call(int id, String key, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Get", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Get_args args = new Get_args();
        args.setId(id);
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ClientResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Get();
      }
    }

    public void Put(int id, String key, String value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Put_call method_call = new Put_call(id, key, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Put_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      private String key;
      private String value;
      public Put_call(int id, String key, String value, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.key = key;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Put", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Put_args args = new Put_args();
        args.setId(id);
        args.setKey(key);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ClientResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Put();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("AppendEntries", new AppendEntries());
      processMap.put("RequestVote", new RequestVote());
      processMap.put("Get", new Get());
      processMap.put("Put", new Put());
      return processMap;
    }

    public static class AppendEntries<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AppendEntries_args> {
      public AppendEntries() {
        super("AppendEntries");
      }

      public AppendEntries_args getEmptyArgsInstance() {
        return new AppendEntries_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AppendEntries_result getResult(I iface, AppendEntries_args args) throws org.apache.thrift.TException {
        AppendEntries_result result = new AppendEntries_result();
        result.success = iface.AppendEntries(args.term, args.leaderID, args.prevLogIndex, args.prevLogTerm, args.entries, args.leaderCommit);
        return result;
      }
    }

    public static class RequestVote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestVote_args> {
      public RequestVote() {
        super("RequestVote");
      }

      public RequestVote_args getEmptyArgsInstance() {
        return new RequestVote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public RequestVote_result getResult(I iface, RequestVote_args args) throws org.apache.thrift.TException {
        RequestVote_result result = new RequestVote_result();
        result.success = iface.RequestVote(args.term, args.candidateID, args.lastLogIndex, args.lastLogTerm);
        return result;
      }
    }

    public static class Get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Get_args> {
      public Get() {
        super("Get");
      }

      public Get_args getEmptyArgsInstance() {
        return new Get_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Get_result getResult(I iface, Get_args args) throws org.apache.thrift.TException {
        Get_result result = new Get_result();
        result.success = iface.Get(args.id, args.key);
        return result;
      }
    }

    public static class Put<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Put_args> {
      public Put() {
        super("Put");
      }

      public Put_args getEmptyArgsInstance() {
        return new Put_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Put_result getResult(I iface, Put_args args) throws org.apache.thrift.TException {
        Put_result result = new Put_result();
        result.success = iface.Put(args.id, args.key, args.value);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("AppendEntries", new AppendEntries());
      processMap.put("RequestVote", new RequestVote());
      processMap.put("Get", new Get());
      processMap.put("Put", new Put());
      return processMap;
    }

    public static class AppendEntries<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AppendEntries_args, AppendEntriesResponse> {
      public AppendEntries() {
        super("AppendEntries");
      }

      public AppendEntries_args getEmptyArgsInstance() {
        return new AppendEntries_args();
      }

      public AsyncMethodCallback<AppendEntriesResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AppendEntriesResponse>() { 
          public void onComplete(AppendEntriesResponse o) {
            AppendEntries_result result = new AppendEntries_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            AppendEntries_result result = new AppendEntries_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AppendEntries_args args, org.apache.thrift.async.AsyncMethodCallback<AppendEntriesResponse> resultHandler) throws TException {
        iface.AppendEntries(args.term, args.leaderID, args.prevLogIndex, args.prevLogTerm, args.entries, args.leaderCommit,resultHandler);
      }
    }

    public static class RequestVote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RequestVote_args, RequestVoteResponse> {
      public RequestVote() {
        super("RequestVote");
      }

      public RequestVote_args getEmptyArgsInstance() {
        return new RequestVote_args();
      }

      public AsyncMethodCallback<RequestVoteResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RequestVoteResponse>() { 
          public void onComplete(RequestVoteResponse o) {
            RequestVote_result result = new RequestVote_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            RequestVote_result result = new RequestVote_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, RequestVote_args args, org.apache.thrift.async.AsyncMethodCallback<RequestVoteResponse> resultHandler) throws TException {
        iface.RequestVote(args.term, args.candidateID, args.lastLogIndex, args.lastLogTerm,resultHandler);
      }
    }

    public static class Get<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Get_args, ClientResponse> {
      public Get() {
        super("Get");
      }

      public Get_args getEmptyArgsInstance() {
        return new Get_args();
      }

      public AsyncMethodCallback<ClientResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ClientResponse>() { 
          public void onComplete(ClientResponse o) {
            Get_result result = new Get_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Get_result result = new Get_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Get_args args, org.apache.thrift.async.AsyncMethodCallback<ClientResponse> resultHandler) throws TException {
        iface.Get(args.id, args.key,resultHandler);
      }
    }

    public static class Put<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Put_args, ClientResponse> {
      public Put() {
        super("Put");
      }

      public Put_args getEmptyArgsInstance() {
        return new Put_args();
      }

      public AsyncMethodCallback<ClientResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ClientResponse>() { 
          public void onComplete(ClientResponse o) {
            Put_result result = new Put_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Put_result result = new Put_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Put_args args, org.apache.thrift.async.AsyncMethodCallback<ClientResponse> resultHandler) throws TException {
        iface.Put(args.id, args.key, args.value,resultHandler);
      }
    }

  }

  public static class AppendEntries_args implements org.apache.thrift.TBase<AppendEntries_args, AppendEntries_args._Fields>, java.io.Serializable, Cloneable, Comparable<AppendEntries_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppendEntries_args");

    private static final org.apache.thrift.protocol.TField TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("term", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LEADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leaderID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PREV_LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("prevLogIndex", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PREV_LOG_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("prevLogTerm", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entries", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField LEADER_COMMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("leaderCommit", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AppendEntries_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AppendEntries_argsTupleSchemeFactory());
    }

    public int term; // required
    public int leaderID; // required
    public int prevLogIndex; // required
    public int prevLogTerm; // required
    public List<Entry> entries; // required
    public int leaderCommit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TERM((short)1, "term"),
      LEADER_ID((short)2, "leaderID"),
      PREV_LOG_INDEX((short)3, "prevLogIndex"),
      PREV_LOG_TERM((short)4, "prevLogTerm"),
      ENTRIES((short)5, "entries"),
      LEADER_COMMIT((short)6, "leaderCommit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TERM
            return TERM;
          case 2: // LEADER_ID
            return LEADER_ID;
          case 3: // PREV_LOG_INDEX
            return PREV_LOG_INDEX;
          case 4: // PREV_LOG_TERM
            return PREV_LOG_TERM;
          case 5: // ENTRIES
            return ENTRIES;
          case 6: // LEADER_COMMIT
            return LEADER_COMMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TERM_ISSET_ID = 0;
    private static final int __LEADERID_ISSET_ID = 1;
    private static final int __PREVLOGINDEX_ISSET_ID = 2;
    private static final int __PREVLOGTERM_ISSET_ID = 3;
    private static final int __LEADERCOMMIT_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TERM, new org.apache.thrift.meta_data.FieldMetaData("term", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LEADER_ID, new org.apache.thrift.meta_data.FieldMetaData("leaderID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("prevLogIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_LOG_TERM, new org.apache.thrift.meta_data.FieldMetaData("prevLogTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("entries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Entry.class))));
      tmpMap.put(_Fields.LEADER_COMMIT, new org.apache.thrift.meta_data.FieldMetaData("leaderCommit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppendEntries_args.class, metaDataMap);
    }

    public AppendEntries_args() {
    }

    public AppendEntries_args(
      int term,
      int leaderID,
      int prevLogIndex,
      int prevLogTerm,
      List<Entry> entries,
      int leaderCommit)
    {
      this();
      this.term = term;
      setTermIsSet(true);
      this.leaderID = leaderID;
      setLeaderIDIsSet(true);
      this.prevLogIndex = prevLogIndex;
      setPrevLogIndexIsSet(true);
      this.prevLogTerm = prevLogTerm;
      setPrevLogTermIsSet(true);
      this.entries = entries;
      this.leaderCommit = leaderCommit;
      setLeaderCommitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppendEntries_args(AppendEntries_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.term = other.term;
      this.leaderID = other.leaderID;
      this.prevLogIndex = other.prevLogIndex;
      this.prevLogTerm = other.prevLogTerm;
      if (other.isSetEntries()) {
        List<Entry> __this__entries = new ArrayList<Entry>(other.entries.size());
        for (Entry other_element : other.entries) {
          __this__entries.add(new Entry(other_element));
        }
        this.entries = __this__entries;
      }
      this.leaderCommit = other.leaderCommit;
    }

    public AppendEntries_args deepCopy() {
      return new AppendEntries_args(this);
    }

    @Override
    public void clear() {
      setTermIsSet(false);
      this.term = 0;
      setLeaderIDIsSet(false);
      this.leaderID = 0;
      setPrevLogIndexIsSet(false);
      this.prevLogIndex = 0;
      setPrevLogTermIsSet(false);
      this.prevLogTerm = 0;
      this.entries = null;
      setLeaderCommitIsSet(false);
      this.leaderCommit = 0;
    }

    public int getTerm() {
      return this.term;
    }

    public AppendEntries_args setTerm(int term) {
      this.term = term;
      setTermIsSet(true);
      return this;
    }

    public void unsetTerm() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TERM_ISSET_ID);
    }

    /** Returns true if field term is set (has been assigned a value) and false otherwise */
    public boolean isSetTerm() {
      return EncodingUtils.testBit(__isset_bitfield, __TERM_ISSET_ID);
    }

    public void setTermIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TERM_ISSET_ID, value);
    }

    public int getLeaderID() {
      return this.leaderID;
    }

    public AppendEntries_args setLeaderID(int leaderID) {
      this.leaderID = leaderID;
      setLeaderIDIsSet(true);
      return this;
    }

    public void unsetLeaderID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEADERID_ISSET_ID);
    }

    /** Returns true if field leaderID is set (has been assigned a value) and false otherwise */
    public boolean isSetLeaderID() {
      return EncodingUtils.testBit(__isset_bitfield, __LEADERID_ISSET_ID);
    }

    public void setLeaderIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEADERID_ISSET_ID, value);
    }

    public int getPrevLogIndex() {
      return this.prevLogIndex;
    }

    public AppendEntries_args setPrevLogIndex(int prevLogIndex) {
      this.prevLogIndex = prevLogIndex;
      setPrevLogIndexIsSet(true);
      return this;
    }

    public void unsetPrevLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREVLOGINDEX_ISSET_ID);
    }

    /** Returns true if field prevLogIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetPrevLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __PREVLOGINDEX_ISSET_ID);
    }

    public void setPrevLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREVLOGINDEX_ISSET_ID, value);
    }

    public int getPrevLogTerm() {
      return this.prevLogTerm;
    }

    public AppendEntries_args setPrevLogTerm(int prevLogTerm) {
      this.prevLogTerm = prevLogTerm;
      setPrevLogTermIsSet(true);
      return this;
    }

    public void unsetPrevLogTerm() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREVLOGTERM_ISSET_ID);
    }

    /** Returns true if field prevLogTerm is set (has been assigned a value) and false otherwise */
    public boolean isSetPrevLogTerm() {
      return EncodingUtils.testBit(__isset_bitfield, __PREVLOGTERM_ISSET_ID);
    }

    public void setPrevLogTermIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREVLOGTERM_ISSET_ID, value);
    }

    public int getEntriesSize() {
      return (this.entries == null) ? 0 : this.entries.size();
    }

    public java.util.Iterator<Entry> getEntriesIterator() {
      return (this.entries == null) ? null : this.entries.iterator();
    }

    public void addToEntries(Entry elem) {
      if (this.entries == null) {
        this.entries = new ArrayList<Entry>();
      }
      this.entries.add(elem);
    }

    public List<Entry> getEntries() {
      return this.entries;
    }

    public AppendEntries_args setEntries(List<Entry> entries) {
      this.entries = entries;
      return this;
    }

    public void unsetEntries() {
      this.entries = null;
    }

    /** Returns true if field entries is set (has been assigned a value) and false otherwise */
    public boolean isSetEntries() {
      return this.entries != null;
    }

    public void setEntriesIsSet(boolean value) {
      if (!value) {
        this.entries = null;
      }
    }

    public int getLeaderCommit() {
      return this.leaderCommit;
    }

    public AppendEntries_args setLeaderCommit(int leaderCommit) {
      this.leaderCommit = leaderCommit;
      setLeaderCommitIsSet(true);
      return this;
    }

    public void unsetLeaderCommit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEADERCOMMIT_ISSET_ID);
    }

    /** Returns true if field leaderCommit is set (has been assigned a value) and false otherwise */
    public boolean isSetLeaderCommit() {
      return EncodingUtils.testBit(__isset_bitfield, __LEADERCOMMIT_ISSET_ID);
    }

    public void setLeaderCommitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEADERCOMMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TERM:
        if (value == null) {
          unsetTerm();
        } else {
          setTerm((Integer)value);
        }
        break;

      case LEADER_ID:
        if (value == null) {
          unsetLeaderID();
        } else {
          setLeaderID((Integer)value);
        }
        break;

      case PREV_LOG_INDEX:
        if (value == null) {
          unsetPrevLogIndex();
        } else {
          setPrevLogIndex((Integer)value);
        }
        break;

      case PREV_LOG_TERM:
        if (value == null) {
          unsetPrevLogTerm();
        } else {
          setPrevLogTerm((Integer)value);
        }
        break;

      case ENTRIES:
        if (value == null) {
          unsetEntries();
        } else {
          setEntries((List<Entry>)value);
        }
        break;

      case LEADER_COMMIT:
        if (value == null) {
          unsetLeaderCommit();
        } else {
          setLeaderCommit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TERM:
        return getTerm();

      case LEADER_ID:
        return getLeaderID();

      case PREV_LOG_INDEX:
        return getPrevLogIndex();

      case PREV_LOG_TERM:
        return getPrevLogTerm();

      case ENTRIES:
        return getEntries();

      case LEADER_COMMIT:
        return getLeaderCommit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TERM:
        return isSetTerm();
      case LEADER_ID:
        return isSetLeaderID();
      case PREV_LOG_INDEX:
        return isSetPrevLogIndex();
      case PREV_LOG_TERM:
        return isSetPrevLogTerm();
      case ENTRIES:
        return isSetEntries();
      case LEADER_COMMIT:
        return isSetLeaderCommit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AppendEntries_args)
        return this.equals((AppendEntries_args)that);
      return false;
    }

    public boolean equals(AppendEntries_args that) {
      if (that == null)
        return false;

      boolean this_present_term = true;
      boolean that_present_term = true;
      if (this_present_term || that_present_term) {
        if (!(this_present_term && that_present_term))
          return false;
        if (this.term != that.term)
          return false;
      }

      boolean this_present_leaderID = true;
      boolean that_present_leaderID = true;
      if (this_present_leaderID || that_present_leaderID) {
        if (!(this_present_leaderID && that_present_leaderID))
          return false;
        if (this.leaderID != that.leaderID)
          return false;
      }

      boolean this_present_prevLogIndex = true;
      boolean that_present_prevLogIndex = true;
      if (this_present_prevLogIndex || that_present_prevLogIndex) {
        if (!(this_present_prevLogIndex && that_present_prevLogIndex))
          return false;
        if (this.prevLogIndex != that.prevLogIndex)
          return false;
      }

      boolean this_present_prevLogTerm = true;
      boolean that_present_prevLogTerm = true;
      if (this_present_prevLogTerm || that_present_prevLogTerm) {
        if (!(this_present_prevLogTerm && that_present_prevLogTerm))
          return false;
        if (this.prevLogTerm != that.prevLogTerm)
          return false;
      }

      boolean this_present_entries = true && this.isSetEntries();
      boolean that_present_entries = true && that.isSetEntries();
      if (this_present_entries || that_present_entries) {
        if (!(this_present_entries && that_present_entries))
          return false;
        if (!this.entries.equals(that.entries))
          return false;
      }

      boolean this_present_leaderCommit = true;
      boolean that_present_leaderCommit = true;
      if (this_present_leaderCommit || that_present_leaderCommit) {
        if (!(this_present_leaderCommit && that_present_leaderCommit))
          return false;
        if (this.leaderCommit != that.leaderCommit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_term = true;
      list.add(present_term);
      if (present_term)
        list.add(term);

      boolean present_leaderID = true;
      list.add(present_leaderID);
      if (present_leaderID)
        list.add(leaderID);

      boolean present_prevLogIndex = true;
      list.add(present_prevLogIndex);
      if (present_prevLogIndex)
        list.add(prevLogIndex);

      boolean present_prevLogTerm = true;
      list.add(present_prevLogTerm);
      if (present_prevLogTerm)
        list.add(prevLogTerm);

      boolean present_entries = true && (isSetEntries());
      list.add(present_entries);
      if (present_entries)
        list.add(entries);

      boolean present_leaderCommit = true;
      list.add(present_leaderCommit);
      if (present_leaderCommit)
        list.add(leaderCommit);

      return list.hashCode();
    }

    @Override
    public int compareTo(AppendEntries_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTerm()).compareTo(other.isSetTerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.term, other.term);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLeaderID()).compareTo(other.isSetLeaderID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLeaderID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaderID, other.leaderID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrevLogIndex()).compareTo(other.isSetPrevLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrevLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prevLogIndex, other.prevLogIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrevLogTerm()).compareTo(other.isSetPrevLogTerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrevLogTerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prevLogTerm, other.prevLogTerm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntries()).compareTo(other.isSetEntries());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntries()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entries, other.entries);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLeaderCommit()).compareTo(other.isSetLeaderCommit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLeaderCommit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaderCommit, other.leaderCommit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AppendEntries_args(");
      boolean first = true;

      sb.append("term:");
      sb.append(this.term);
      first = false;
      if (!first) sb.append(", ");
      sb.append("leaderID:");
      sb.append(this.leaderID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prevLogIndex:");
      sb.append(this.prevLogIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prevLogTerm:");
      sb.append(this.prevLogTerm);
      first = false;
      if (!first) sb.append(", ");
      sb.append("entries:");
      if (this.entries == null) {
        sb.append("null");
      } else {
        sb.append(this.entries);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("leaderCommit:");
      sb.append(this.leaderCommit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AppendEntries_argsStandardSchemeFactory implements SchemeFactory {
      public AppendEntries_argsStandardScheme getScheme() {
        return new AppendEntries_argsStandardScheme();
      }
    }

    private static class AppendEntries_argsStandardScheme extends StandardScheme<AppendEntries_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AppendEntries_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.term = iprot.readI32();
                struct.setTermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LEADER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.leaderID = iprot.readI32();
                struct.setLeaderIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PREV_LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prevLogIndex = iprot.readI32();
                struct.setPrevLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PREV_LOG_TERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prevLogTerm = iprot.readI32();
                struct.setPrevLogTermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ENTRIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.entries = new ArrayList<Entry>(_list0.size);
                  Entry _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new Entry();
                    _elem1.read(iprot);
                    struct.entries.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setEntriesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LEADER_COMMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.leaderCommit = iprot.readI32();
                struct.setLeaderCommitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AppendEntries_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TERM_FIELD_DESC);
        oprot.writeI32(struct.term);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LEADER_ID_FIELD_DESC);
        oprot.writeI32(struct.leaderID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_LOG_INDEX_FIELD_DESC);
        oprot.writeI32(struct.prevLogIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_LOG_TERM_FIELD_DESC);
        oprot.writeI32(struct.prevLogTerm);
        oprot.writeFieldEnd();
        if (struct.entries != null) {
          oprot.writeFieldBegin(ENTRIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entries.size()));
            for (Entry _iter3 : struct.entries)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LEADER_COMMIT_FIELD_DESC);
        oprot.writeI32(struct.leaderCommit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AppendEntries_argsTupleSchemeFactory implements SchemeFactory {
      public AppendEntries_argsTupleScheme getScheme() {
        return new AppendEntries_argsTupleScheme();
      }
    }

    private static class AppendEntries_argsTupleScheme extends TupleScheme<AppendEntries_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AppendEntries_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTerm()) {
          optionals.set(0);
        }
        if (struct.isSetLeaderID()) {
          optionals.set(1);
        }
        if (struct.isSetPrevLogIndex()) {
          optionals.set(2);
        }
        if (struct.isSetPrevLogTerm()) {
          optionals.set(3);
        }
        if (struct.isSetEntries()) {
          optionals.set(4);
        }
        if (struct.isSetLeaderCommit()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetTerm()) {
          oprot.writeI32(struct.term);
        }
        if (struct.isSetLeaderID()) {
          oprot.writeI32(struct.leaderID);
        }
        if (struct.isSetPrevLogIndex()) {
          oprot.writeI32(struct.prevLogIndex);
        }
        if (struct.isSetPrevLogTerm()) {
          oprot.writeI32(struct.prevLogTerm);
        }
        if (struct.isSetEntries()) {
          {
            oprot.writeI32(struct.entries.size());
            for (Entry _iter4 : struct.entries)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetLeaderCommit()) {
          oprot.writeI32(struct.leaderCommit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AppendEntries_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.term = iprot.readI32();
          struct.setTermIsSet(true);
        }
        if (incoming.get(1)) {
          struct.leaderID = iprot.readI32();
          struct.setLeaderIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.prevLogIndex = iprot.readI32();
          struct.setPrevLogIndexIsSet(true);
        }
        if (incoming.get(3)) {
          struct.prevLogTerm = iprot.readI32();
          struct.setPrevLogTermIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.entries = new ArrayList<Entry>(_list5.size);
            Entry _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new Entry();
              _elem6.read(iprot);
              struct.entries.add(_elem6);
            }
          }
          struct.setEntriesIsSet(true);
        }
        if (incoming.get(5)) {
          struct.leaderCommit = iprot.readI32();
          struct.setLeaderCommitIsSet(true);
        }
      }
    }

  }

  public static class AppendEntries_result implements org.apache.thrift.TBase<AppendEntries_result, AppendEntries_result._Fields>, java.io.Serializable, Cloneable, Comparable<AppendEntries_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppendEntries_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AppendEntries_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AppendEntries_resultTupleSchemeFactory());
    }

    public AppendEntriesResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppendEntriesResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppendEntries_result.class, metaDataMap);
    }

    public AppendEntries_result() {
    }

    public AppendEntries_result(
      AppendEntriesResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppendEntries_result(AppendEntries_result other) {
      if (other.isSetSuccess()) {
        this.success = new AppendEntriesResponse(other.success);
      }
    }

    public AppendEntries_result deepCopy() {
      return new AppendEntries_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public AppendEntriesResponse getSuccess() {
      return this.success;
    }

    public AppendEntries_result setSuccess(AppendEntriesResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AppendEntriesResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AppendEntries_result)
        return this.equals((AppendEntries_result)that);
      return false;
    }

    public boolean equals(AppendEntries_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(AppendEntries_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AppendEntries_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AppendEntries_resultStandardSchemeFactory implements SchemeFactory {
      public AppendEntries_resultStandardScheme getScheme() {
        return new AppendEntries_resultStandardScheme();
      }
    }

    private static class AppendEntries_resultStandardScheme extends StandardScheme<AppendEntries_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AppendEntries_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AppendEntriesResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AppendEntries_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AppendEntries_resultTupleSchemeFactory implements SchemeFactory {
      public AppendEntries_resultTupleScheme getScheme() {
        return new AppendEntries_resultTupleScheme();
      }
    }

    private static class AppendEntries_resultTupleScheme extends TupleScheme<AppendEntries_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AppendEntries_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AppendEntries_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new AppendEntriesResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RequestVote_args implements org.apache.thrift.TBase<RequestVote_args, RequestVote_args._Fields>, java.io.Serializable, Cloneable, Comparable<RequestVote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestVote_args");

    private static final org.apache.thrift.protocol.TField TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("term", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CANDIDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField LAST_LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLogIndex", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LAST_LOG_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLogTerm", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RequestVote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RequestVote_argsTupleSchemeFactory());
    }

    public int term; // required
    public int candidateID; // required
    public int lastLogIndex; // required
    public int lastLogTerm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TERM((short)1, "term"),
      CANDIDATE_ID((short)2, "candidateID"),
      LAST_LOG_INDEX((short)3, "lastLogIndex"),
      LAST_LOG_TERM((short)4, "lastLogTerm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TERM
            return TERM;
          case 2: // CANDIDATE_ID
            return CANDIDATE_ID;
          case 3: // LAST_LOG_INDEX
            return LAST_LOG_INDEX;
          case 4: // LAST_LOG_TERM
            return LAST_LOG_TERM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TERM_ISSET_ID = 0;
    private static final int __CANDIDATEID_ISSET_ID = 1;
    private static final int __LASTLOGINDEX_ISSET_ID = 2;
    private static final int __LASTLOGTERM_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TERM, new org.apache.thrift.meta_data.FieldMetaData("term", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CANDIDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("candidateID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LAST_LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("lastLogIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LAST_LOG_TERM, new org.apache.thrift.meta_data.FieldMetaData("lastLogTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestVote_args.class, metaDataMap);
    }

    public RequestVote_args() {
    }

    public RequestVote_args(
      int term,
      int candidateID,
      int lastLogIndex,
      int lastLogTerm)
    {
      this();
      this.term = term;
      setTermIsSet(true);
      this.candidateID = candidateID;
      setCandidateIDIsSet(true);
      this.lastLogIndex = lastLogIndex;
      setLastLogIndexIsSet(true);
      this.lastLogTerm = lastLogTerm;
      setLastLogTermIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestVote_args(RequestVote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.term = other.term;
      this.candidateID = other.candidateID;
      this.lastLogIndex = other.lastLogIndex;
      this.lastLogTerm = other.lastLogTerm;
    }

    public RequestVote_args deepCopy() {
      return new RequestVote_args(this);
    }

    @Override
    public void clear() {
      setTermIsSet(false);
      this.term = 0;
      setCandidateIDIsSet(false);
      this.candidateID = 0;
      setLastLogIndexIsSet(false);
      this.lastLogIndex = 0;
      setLastLogTermIsSet(false);
      this.lastLogTerm = 0;
    }

    public int getTerm() {
      return this.term;
    }

    public RequestVote_args setTerm(int term) {
      this.term = term;
      setTermIsSet(true);
      return this;
    }

    public void unsetTerm() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TERM_ISSET_ID);
    }

    /** Returns true if field term is set (has been assigned a value) and false otherwise */
    public boolean isSetTerm() {
      return EncodingUtils.testBit(__isset_bitfield, __TERM_ISSET_ID);
    }

    public void setTermIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TERM_ISSET_ID, value);
    }

    public int getCandidateID() {
      return this.candidateID;
    }

    public RequestVote_args setCandidateID(int candidateID) {
      this.candidateID = candidateID;
      setCandidateIDIsSet(true);
      return this;
    }

    public void unsetCandidateID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANDIDATEID_ISSET_ID);
    }

    /** Returns true if field candidateID is set (has been assigned a value) and false otherwise */
    public boolean isSetCandidateID() {
      return EncodingUtils.testBit(__isset_bitfield, __CANDIDATEID_ISSET_ID);
    }

    public void setCandidateIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANDIDATEID_ISSET_ID, value);
    }

    public int getLastLogIndex() {
      return this.lastLogIndex;
    }

    public RequestVote_args setLastLogIndex(int lastLogIndex) {
      this.lastLogIndex = lastLogIndex;
      setLastLogIndexIsSet(true);
      return this;
    }

    public void unsetLastLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOGINDEX_ISSET_ID);
    }

    /** Returns true if field lastLogIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTLOGINDEX_ISSET_ID);
    }

    public void setLastLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOGINDEX_ISSET_ID, value);
    }

    public int getLastLogTerm() {
      return this.lastLogTerm;
    }

    public RequestVote_args setLastLogTerm(int lastLogTerm) {
      this.lastLogTerm = lastLogTerm;
      setLastLogTermIsSet(true);
      return this;
    }

    public void unsetLastLogTerm() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOGTERM_ISSET_ID);
    }

    /** Returns true if field lastLogTerm is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLogTerm() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTLOGTERM_ISSET_ID);
    }

    public void setLastLogTermIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOGTERM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TERM:
        if (value == null) {
          unsetTerm();
        } else {
          setTerm((Integer)value);
        }
        break;

      case CANDIDATE_ID:
        if (value == null) {
          unsetCandidateID();
        } else {
          setCandidateID((Integer)value);
        }
        break;

      case LAST_LOG_INDEX:
        if (value == null) {
          unsetLastLogIndex();
        } else {
          setLastLogIndex((Integer)value);
        }
        break;

      case LAST_LOG_TERM:
        if (value == null) {
          unsetLastLogTerm();
        } else {
          setLastLogTerm((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TERM:
        return getTerm();

      case CANDIDATE_ID:
        return getCandidateID();

      case LAST_LOG_INDEX:
        return getLastLogIndex();

      case LAST_LOG_TERM:
        return getLastLogTerm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TERM:
        return isSetTerm();
      case CANDIDATE_ID:
        return isSetCandidateID();
      case LAST_LOG_INDEX:
        return isSetLastLogIndex();
      case LAST_LOG_TERM:
        return isSetLastLogTerm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RequestVote_args)
        return this.equals((RequestVote_args)that);
      return false;
    }

    public boolean equals(RequestVote_args that) {
      if (that == null)
        return false;

      boolean this_present_term = true;
      boolean that_present_term = true;
      if (this_present_term || that_present_term) {
        if (!(this_present_term && that_present_term))
          return false;
        if (this.term != that.term)
          return false;
      }

      boolean this_present_candidateID = true;
      boolean that_present_candidateID = true;
      if (this_present_candidateID || that_present_candidateID) {
        if (!(this_present_candidateID && that_present_candidateID))
          return false;
        if (this.candidateID != that.candidateID)
          return false;
      }

      boolean this_present_lastLogIndex = true;
      boolean that_present_lastLogIndex = true;
      if (this_present_lastLogIndex || that_present_lastLogIndex) {
        if (!(this_present_lastLogIndex && that_present_lastLogIndex))
          return false;
        if (this.lastLogIndex != that.lastLogIndex)
          return false;
      }

      boolean this_present_lastLogTerm = true;
      boolean that_present_lastLogTerm = true;
      if (this_present_lastLogTerm || that_present_lastLogTerm) {
        if (!(this_present_lastLogTerm && that_present_lastLogTerm))
          return false;
        if (this.lastLogTerm != that.lastLogTerm)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_term = true;
      list.add(present_term);
      if (present_term)
        list.add(term);

      boolean present_candidateID = true;
      list.add(present_candidateID);
      if (present_candidateID)
        list.add(candidateID);

      boolean present_lastLogIndex = true;
      list.add(present_lastLogIndex);
      if (present_lastLogIndex)
        list.add(lastLogIndex);

      boolean present_lastLogTerm = true;
      list.add(present_lastLogTerm);
      if (present_lastLogTerm)
        list.add(lastLogTerm);

      return list.hashCode();
    }

    @Override
    public int compareTo(RequestVote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTerm()).compareTo(other.isSetTerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.term, other.term);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCandidateID()).compareTo(other.isSetCandidateID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCandidateID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateID, other.candidateID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLastLogIndex()).compareTo(other.isSetLastLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLogIndex, other.lastLogIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLastLogTerm()).compareTo(other.isSetLastLogTerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLogTerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLogTerm, other.lastLogTerm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RequestVote_args(");
      boolean first = true;

      sb.append("term:");
      sb.append(this.term);
      first = false;
      if (!first) sb.append(", ");
      sb.append("candidateID:");
      sb.append(this.candidateID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastLogIndex:");
      sb.append(this.lastLogIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastLogTerm:");
      sb.append(this.lastLogTerm);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestVote_argsStandardSchemeFactory implements SchemeFactory {
      public RequestVote_argsStandardScheme getScheme() {
        return new RequestVote_argsStandardScheme();
      }
    }

    private static class RequestVote_argsStandardScheme extends StandardScheme<RequestVote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestVote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.term = iprot.readI32();
                struct.setTermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CANDIDATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.candidateID = iprot.readI32();
                struct.setCandidateIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LAST_LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lastLogIndex = iprot.readI32();
                struct.setLastLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LAST_LOG_TERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lastLogTerm = iprot.readI32();
                struct.setLastLogTermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestVote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TERM_FIELD_DESC);
        oprot.writeI32(struct.term);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CANDIDATE_ID_FIELD_DESC);
        oprot.writeI32(struct.candidateID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAST_LOG_INDEX_FIELD_DESC);
        oprot.writeI32(struct.lastLogIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAST_LOG_TERM_FIELD_DESC);
        oprot.writeI32(struct.lastLogTerm);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestVote_argsTupleSchemeFactory implements SchemeFactory {
      public RequestVote_argsTupleScheme getScheme() {
        return new RequestVote_argsTupleScheme();
      }
    }

    private static class RequestVote_argsTupleScheme extends TupleScheme<RequestVote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestVote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTerm()) {
          optionals.set(0);
        }
        if (struct.isSetCandidateID()) {
          optionals.set(1);
        }
        if (struct.isSetLastLogIndex()) {
          optionals.set(2);
        }
        if (struct.isSetLastLogTerm()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTerm()) {
          oprot.writeI32(struct.term);
        }
        if (struct.isSetCandidateID()) {
          oprot.writeI32(struct.candidateID);
        }
        if (struct.isSetLastLogIndex()) {
          oprot.writeI32(struct.lastLogIndex);
        }
        if (struct.isSetLastLogTerm()) {
          oprot.writeI32(struct.lastLogTerm);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestVote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.term = iprot.readI32();
          struct.setTermIsSet(true);
        }
        if (incoming.get(1)) {
          struct.candidateID = iprot.readI32();
          struct.setCandidateIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lastLogIndex = iprot.readI32();
          struct.setLastLogIndexIsSet(true);
        }
        if (incoming.get(3)) {
          struct.lastLogTerm = iprot.readI32();
          struct.setLastLogTermIsSet(true);
        }
      }
    }

  }

  public static class RequestVote_result implements org.apache.thrift.TBase<RequestVote_result, RequestVote_result._Fields>, java.io.Serializable, Cloneable, Comparable<RequestVote_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestVote_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RequestVote_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RequestVote_resultTupleSchemeFactory());
    }

    public RequestVoteResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestVoteResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestVote_result.class, metaDataMap);
    }

    public RequestVote_result() {
    }

    public RequestVote_result(
      RequestVoteResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestVote_result(RequestVote_result other) {
      if (other.isSetSuccess()) {
        this.success = new RequestVoteResponse(other.success);
      }
    }

    public RequestVote_result deepCopy() {
      return new RequestVote_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RequestVoteResponse getSuccess() {
      return this.success;
    }

    public RequestVote_result setSuccess(RequestVoteResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RequestVoteResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RequestVote_result)
        return this.equals((RequestVote_result)that);
      return false;
    }

    public boolean equals(RequestVote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(RequestVote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RequestVote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestVote_resultStandardSchemeFactory implements SchemeFactory {
      public RequestVote_resultStandardScheme getScheme() {
        return new RequestVote_resultStandardScheme();
      }
    }

    private static class RequestVote_resultStandardScheme extends StandardScheme<RequestVote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestVote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RequestVoteResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestVote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestVote_resultTupleSchemeFactory implements SchemeFactory {
      public RequestVote_resultTupleScheme getScheme() {
        return new RequestVote_resultTupleScheme();
      }
    }

    private static class RequestVote_resultTupleScheme extends TupleScheme<RequestVote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestVote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestVote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RequestVoteResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class Get_args implements org.apache.thrift.TBase<Get_args, Get_args._Fields>, java.io.Serializable, Cloneable, Comparable<Get_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Get_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Get_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Get_argsTupleSchemeFactory());
    }

    public int id; // required
    public String key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      KEY((short)2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Get_args.class, metaDataMap);
    }

    public Get_args() {
    }

    public Get_args(
      int id,
      String key)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Get_args(Get_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public Get_args deepCopy() {
      return new Get_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.key = null;
    }

    public int getId() {
      return this.id;
    }

    public Get_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getKey() {
      return this.key;
    }

    public Get_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Get_args)
        return this.equals((Get_args)that);
      return false;
    }

    public boolean equals(Get_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      return list.hashCode();
    }

    @Override
    public int compareTo(Get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Get_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Get_argsStandardSchemeFactory implements SchemeFactory {
      public Get_argsStandardScheme getScheme() {
        return new Get_argsStandardScheme();
      }
    }

    private static class Get_argsStandardScheme extends StandardScheme<Get_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Get_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Get_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Get_argsTupleSchemeFactory implements SchemeFactory {
      public Get_argsTupleScheme getScheme() {
        return new Get_argsTupleScheme();
      }
    }

    private static class Get_argsTupleScheme extends TupleScheme<Get_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class Get_result implements org.apache.thrift.TBase<Get_result, Get_result._Fields>, java.io.Serializable, Cloneable, Comparable<Get_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Get_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Get_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Get_resultTupleSchemeFactory());
    }

    public ClientResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Get_result.class, metaDataMap);
    }

    public Get_result() {
    }

    public Get_result(
      ClientResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Get_result(Get_result other) {
      if (other.isSetSuccess()) {
        this.success = new ClientResponse(other.success);
      }
    }

    public Get_result deepCopy() {
      return new Get_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ClientResponse getSuccess() {
      return this.success;
    }

    public Get_result setSuccess(ClientResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ClientResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Get_result)
        return this.equals((Get_result)that);
      return false;
    }

    public boolean equals(Get_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(Get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Get_resultStandardSchemeFactory implements SchemeFactory {
      public Get_resultStandardScheme getScheme() {
        return new Get_resultStandardScheme();
      }
    }

    private static class Get_resultStandardScheme extends StandardScheme<Get_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Get_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ClientResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Get_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Get_resultTupleSchemeFactory implements SchemeFactory {
      public Get_resultTupleScheme getScheme() {
        return new Get_resultTupleScheme();
      }
    }

    private static class Get_resultTupleScheme extends TupleScheme<Get_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ClientResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class Put_args implements org.apache.thrift.TBase<Put_args, Put_args._Fields>, java.io.Serializable, Cloneable, Comparable<Put_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Put_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Put_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Put_argsTupleSchemeFactory());
    }

    public int id; // required
    public String key; // required
    public String value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      KEY((short)2, "key"),
      VALUE((short)3, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // KEY
            return KEY;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Put_args.class, metaDataMap);
    }

    public Put_args() {
    }

    public Put_args(
      int id,
      String key,
      String value)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.key = key;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Put_args(Put_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public Put_args deepCopy() {
      return new Put_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.key = null;
      this.value = null;
    }

    public int getId() {
      return this.id;
    }

    public Put_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getKey() {
      return this.key;
    }

    public Put_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public Put_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case KEY:
        return getKey();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case KEY:
        return isSetKey();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Put_args)
        return this.equals((Put_args)that);
      return false;
    }

    public boolean equals(Put_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_value = true && (isSetValue());
      list.add(present_value);
      if (present_value)
        list.add(value);

      return list.hashCode();
    }

    @Override
    public int compareTo(Put_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Put_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Put_argsStandardSchemeFactory implements SchemeFactory {
      public Put_argsStandardScheme getScheme() {
        return new Put_argsStandardScheme();
      }
    }

    private static class Put_argsStandardScheme extends StandardScheme<Put_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Put_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Put_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Put_argsTupleSchemeFactory implements SchemeFactory {
      public Put_argsTupleScheme getScheme() {
        return new Put_argsTupleScheme();
      }
    }

    private static class Put_argsTupleScheme extends TupleScheme<Put_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Put_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Put_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class Put_result implements org.apache.thrift.TBase<Put_result, Put_result._Fields>, java.io.Serializable, Cloneable, Comparable<Put_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Put_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Put_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Put_resultTupleSchemeFactory());
    }

    public ClientResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Put_result.class, metaDataMap);
    }

    public Put_result() {
    }

    public Put_result(
      ClientResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Put_result(Put_result other) {
      if (other.isSetSuccess()) {
        this.success = new ClientResponse(other.success);
      }
    }

    public Put_result deepCopy() {
      return new Put_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ClientResponse getSuccess() {
      return this.success;
    }

    public Put_result setSuccess(ClientResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ClientResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Put_result)
        return this.equals((Put_result)that);
      return false;
    }

    public boolean equals(Put_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(Put_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Put_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Put_resultStandardSchemeFactory implements SchemeFactory {
      public Put_resultStandardScheme getScheme() {
        return new Put_resultStandardScheme();
      }
    }

    private static class Put_resultStandardScheme extends StandardScheme<Put_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Put_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ClientResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Put_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Put_resultTupleSchemeFactory implements SchemeFactory {
      public Put_resultTupleScheme getScheme() {
        return new Put_resultTupleScheme();
      }
    }

    private static class Put_resultTupleScheme extends TupleScheme<Put_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Put_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Put_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ClientResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
